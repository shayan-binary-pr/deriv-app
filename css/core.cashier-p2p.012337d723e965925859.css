/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.barspinner {
  margin: auto;
  width: 6em;
  height: 2em;
  white-space: nowrap; }

.barspinner__rect {
  margin: 0.4em;
  border-radius: 20px;
  height: 60%;
  width: 0.6em;
  display: inline-block;
  -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
          animation: sk-stretchdelay 1.2s infinite ease-in-out; }

.barspinner__rect--1 {
  -webkit-animation-delay: -1.2s;
          animation-delay: -1.2s; }

.barspinner__rect--2 {
  -webkit-animation-delay: -1.1s;
          animation-delay: -1.1s; }

.barspinner__rect--3 {
  -webkit-animation-delay: -1s;
          animation-delay: -1s; }

.barspinner__rect--4 {
  -webkit-animation-delay: -.9s;
          animation-delay: -.9s; }

.barspinner__rect--5 {
  -webkit-animation-delay: -.8s;
          animation-delay: -.8s; }

.barspinner--dark .barspinner__rect {
  background-color: var(--brand-secondary); }

@-webkit-keyframes sk-stretchdelay {
  0%, 40%, 100% {
    transform: scaleY(1); }
  20% {
    transform: scaleY(2); } }

@keyframes sk-stretchdelay {
  0%, 40%, 100% {
    transform: scaleY(1); }
  20% {
    transform: scaleY(2); } }

.initial-loader {
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  display: flex;
  background: transparent; }

.initial-loader--fullscreen {
  width: 100vw;
  height: 100vh; }

.initial-loader__barspinner {
  margin: 5em auto; }

.initial-loader__barspinner--rect {
  background-color: var(--brand-secondary); }

.initial-loader__text {
  line-height: 44px;
  color: var(--text-prominent);
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5; }

.dc-icon {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1); }

.dc-icon--disabled {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled); }

.dc-icon--active {
  --fill-color1: #fff;
  --fill-color2: #fff; }

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #fff; }

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #fff; }

.dc-icon--secondary {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #fff; }

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #fff; }

.btn {
  vertical-align: middle;
  align-items: center;
  justify-content: center;
  touch-action: manipulation;
  cursor: pointer;
  white-space: nowrap;
  padding: 0 1.6rem;
  display: inline-flex;
  border: 0;
  height: 3.2rem;
  border-radius: 4px;
  transition: all 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
  outline: 0;
  position: relative;
  text-decoration: none;
  text-transform: none !important; }

.btn__text, .btn__icon {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: unset;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general);
  display: flex; }

.btn__icon {
  padding-right: 0.8rem; }

.btn:not([disabled]):hover {
  text-decoration: none; }

.btn--primary {
  background: var(--button-primary-default);
  color: var(--text-colored-background); }

.btn--primary:hover:not([disabled]) {
  background: var(--button-primary-hover); }

.btn--primary:active:not([disabled]) {
  background: var(--button-primary-default); }

.btn--primary:disabled, .btn--primary[disabled] {
  opacity: 0.32;
  cursor: not-allowed !important; }

.btn--primary .btn__text, .btn--primary .btn__icon {
  color: var(--text-colored-background); }

.btn--secondary {
  background: transparent;
  border: 1px solid var(--button-secondary-default); }

.btn--secondary:hover:not([disabled]) {
  background: var(--button-secondary-hover); }

.btn--secondary:active:not([disabled]) {
  border: 1px solid var(--button-secondary-default); }

.btn--secondary:disabled, .btn--secondary[disabled] {
  opacity: 0.32;
  cursor: not-allowed !important; }

.btn--secondary .btn__text, .btn--secondary .btn__icon {
  color: var(--text-prominent); }

.btn--tertiary {
  background: var(--button-tertiary-default); }

.btn--tertiary:hover:not([disabled]) {
  background: var(--button-tertiary-hover); }

.btn--tertiary:active:not([disabled]) {
  background: var(--button-tertiary-default); }

.btn--tertiary .btn__text, .btn--tertiary .btn__icon {
  color: var(--brand-red-coral); }

.btn--tertiary:disabled, .btn--tertiary[disabled] {
  opacity: 0.32;
  cursor: not-allowed !important; }

.btn--green {
  background: var(--status-success); }

.btn--green:hover:not([disabled]) {
  background: var(--transparent-success); }

.btn--green:active:not([disabled]) {
  background: var(--status-success); }

.btn--green .btn__text, .btn--green .btn__icon {
  color: var(--text-colored-background); }

.btn__small {
  height: 2.4rem;
  border-width: 1px; }

.btn__small .btn__text {
  font-size: 1.2rem; }

.btn__medium {
  height: 3.2rem;
  border-width: 1px; }

.btn__medium .btn__text {
  font-size: 1.4rem; }

.btn__large {
  height: 4rem;
  border-width: 2px; }

.btn__large .btn__text {
  font-size: 1.4rem; }

.btn__effect:focus:not(:active):after {
  content: '';
  position: absolute;
  top: -0.1em;
  left: -0.1em;
  bottom: -0.1em;
  right: -0.1em;
  border-radius: inherit;
  border: 0 solid var(--brand-secondary);
  opacity: 0.4;
  -webkit-animation: buttonEffect 0.4s;
          animation: buttonEffect 0.4s;
  -webkit-animation-fill-mode: forwards;
          animation-fill-mode: forwards;
  display: block; }

.btn .initial-loader--btn {
  background-color: unset; }

.btn .initial-loader--btn .initial-loader__barspinner--rect {
  background-color: var(--text-colored-background); }

.btn .initial-loader--btn .barspinner {
  margin: 0.6rem 4px 0 -4px; }

.btn .initial-loader--btn .barspinner__rect {
  height: 35%; }

@-webkit-keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px; } }

@keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px; } }

.dc-button-menu {
  display: flex;
  justify-content: center;
  width: 100%;
  position: relative; }

.dc-button-menu__button:first-child {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px; }

.dc-button-menu__button:last-child {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px; }

.dc-button-menu__button {
  margin: 0;
  border: none;
  border-radius: 0px;
  width: 50%;
  background-color: var(--state-normal); }

.dc-button-menu__button:hover:not(.dc-button-menu__button--active) {
  background-color: var(--state-hover) !important; }

.dc-button-menu__button span {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: unset;
  text-align: left;
  line-height: 1.5;
  color: var(--text-general); }

.dc-button-menu__button--active {
  cursor: auto;
  cursor: initial;
  background-color: var(--state-active) !important; }

.dc-button-menu__button--active span {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: unset;
  text-align: left;
  line-height: 1.5;
  color: var(--text-prominent); }

.dc-button-menu__wrapper {
  position: relative;
  border-radius: 4px;
  width: 100%;
  background-color: var(--state-normal);
  display: flex; }

.dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
  background-color: rgba(0, 0, 0, 0) !important;
  z-index: 1; }

.dc-button-menu__wrapper .dc-button-menu__button:nth-last-child(2) {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px; }

.dc-button-menu--highlight {
  display: block;
  position: absolute;
  content: '';
  height: 100%;
  top: 0;
  left: 0;
  z-index: 0;
  transition: transform 0.25s ease;
  pointer-events: none;
  background-color: var(--state-active) !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-table {
  color: var(--text-general); }

.dc-table__row {
  display: grid;
  height: 100%; }

.dc-table__row--hover:hover {
  background-color: var(--general-section-1);
  cursor: pointer; }

.dc-table__header {
  border-bottom: 2px solid var(--general-section-1);
  height: 52px; }

.dc-table__cell, .dc-table__head {
  font-size: 1.4rem;
  line-height: 1.43;
  display: flex;
  align-items: center; }

.dc-table__cell {
  border-bottom: 1px solid var(--general-section-1); }

.dc-table__cell--right {
  display: flex;
  justify-content: flex-end; }

.dc-table__head {
  font-weight: bold; }

.dc-table__head--right {
  display: flex;
  justify-content: flex-end; }

